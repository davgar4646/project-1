-- Name: [Davonta Gardner]

-- Task 1: Migrate data from STOREFRONT into PRODUCTLIST, then drop STOREFRONT
ALTER TABLE PRODUCTLIST ADD (PRICE NUMBER(6,2), DESCRIPTION VARCHAR2(250));
UPDATE PRODUCTLIST p
SET (PRICE, DESCRIPTION) = (
    SELECT s.PRICE, s.DESCRIPTION
    FROM STOREFRONT s
    WHERE s.PRODUCTCODE = p.PRODUCTCODE
);
DROP TABLE STOREFRONT;

-- Task 2: Create CHATLOG table
CREATE TABLE CHATLOG (
    CHATID NUMBER(3) PRIMARY KEY,
    RECEIVERID NUMBER(3),
    SENDERID NUMBER(3),
    DATESENT DATE,
    CONTENT VARCHAR2(250),
    FOREIGN KEY (RECEIVERID) REFERENCES USERBASE(USERID),
    FOREIGN KEY (SENDERID) REFERENCES USERBASE(USERID)
);
INSERT INTO CHATLOG VALUES (1, 102, 101, SYSDATE, 'Hey, want to play later?');

-- Task 3: Create FRIENDSLIST table
CREATE TABLE FRIENDSLIST (
    USERID NUMBER(3),
    FRIENDID NUMBER(3),
    PRIMARY KEY (USERID, FRIENDID),
    FOREIGN KEY (USERID) REFERENCES USERBASE(USERID),
    FOREIGN KEY (FRIENDID) REFERENCES USERBASE(USERID)
);
INSERT INTO FRIENDSLIST VALUES (101, 102);

-- Task 4: Create WISHLIST table
CREATE TABLE WISHLIST (
    USERID NUMBER(3),
    PRODUCTCODE VARCHAR2(5),
    POSITION NUMBER(3),
    PRIMARY KEY (USERID, PRODUCTCODE),
    FOREIGN KEY (USERID) REFERENCES USERBASE(USERID),
    FOREIGN KEY (PRODUCTCODE) REFERENCES PRODUCTLIST(PRODUCTCODE)
);
INSERT INTO WISHLIST VALUES (101, 'G1234', 1);

-- Task 5: Create USERPROFILE table
CREATE TABLE USERPROFILE (
    USERID NUMBER(3) PRIMARY KEY,
    IMAGEFILE VARCHAR2(250),
    DESCRIPTION VARCHAR2(250),
    FOREIGN KEY (USERID) REFERENCES USERBASE(USERID)
);
INSERT INTO USERPROFILE VALUES (101, '/images/user101.png', 'Gamer and tech enthusiast');

-- Task 6: Create SECURITYQUESTION table
CREATE TABLE SECURITYQUESTION (
    QUESTIONID NUMBER PRIMARY KEY,
    USERID NUMBER(3),
    QUESTION VARCHAR2(250),
    ANSWER VARCHAR2(250),
    FOREIGN KEY (USERID) REFERENCES USERBASE(USERID)
);
INSERT INTO SECURITYQUESTION VALUES (1, 101, 'What is your petâ€™s name?', 'Shadow');

-- Task 7: Create COMMUNITYRULES table
CREATE TABLE COMMUNITYRULES (
    RULENUM NUMBER(3) PRIMARY KEY,
    TITLE VARCHAR2(250),
    DESCRIPTION VARCHAR2(250),
    SEVERITYPOINT NUMBER(4)
);
INSERT INTO COMMUNITYRULES VALUES (1, 'No Harassment', 'Treat others respectfully', 10);

-- Task 8: Create INFRACTIONS table
CREATE TABLE INFRACTIONS (
    INFRACTIONID NUMBER PRIMARY KEY,
    USERID NUMBER(3),
    RULENUM NUMBER(3),
    DATEASSIGNED DATE,
    PENALTY VARCHAR2(250),
    FOREIGN KEY (USERID) REFERENCES USERBASE(USERID),
    FOREIGN KEY (RULENUM) REFERENCES COMMUNITYRULES(RULENUM)
);
INSERT INTO INFRACTIONS VALUES (1, 101, 1, SYSDATE, '1-day suspension');

-- Task 9: Create USERSUPPORT table
CREATE TABLE USERSUPPORT (
    TICKETID NUMBER PRIMARY KEY,
    EMAIL VARCHAR2(250),
    ISSUE VARCHAR2(250),
    DATESUBMITTED DATE,
    DATEUPDATED DATE,
    STATUS VARCHAR2(250)
);
INSERT INTO USERSUPPORT VALUES (1, 'user@example.com', 'Unable to login', SYSDATE, SYSDATE, 'NEW');

-- Task 10a: View with unique SECURITYQUESTION.QUESTION
CREATE OR REPLACE VIEW UniqueQuestions AS
SELECT DISTINCT QUESTION FROM SECURITYQUESTION;

-- Task 10b: View of active support tickets
CREATE OR REPLACE VIEW ActiveSupportTickets AS
SELECT TICKETID, EMAIL, ISSUE, DATEUPDATED
FROM USERSUPPORT
WHERE STATUS IN ('NEW', 'IN PROGRESS')
ORDER BY DATEUPDATED ASC;

